ggplot(idat,aes(x=item, y=gradWeights)) + geom_point()
#5. gradual ranking using our function
gradWeights <- RankingWeights(numItems = N, priority = "top", steepness = .9)#weights
grad_ILResults <- WeightedLossRanking(sampleMatrix = p_post, loss = 2,
rankWeights = gradWeights)
grad_ILRanks <- as.integer(grad_ILResults[[2]])
idat<-idat[order(idat$item),] #we needed to reorder bc of alphabetizing differences
idat$grad_rank <- grad_ILRanks
#gradual ranking
t_grad_ranking <- idat[order(idat$grad_rank),c("County", "n", "p", "zero_one_five", "zero_one_rank", "grad_rank")] #sort by unweighted ranks
print(xtable(t_grad_ranking[1:12,], caption = NULL), include.rownames = FALSE) #use \scalebox{0.7}{before tabular
#5. gradual ranking using our function
gradWeights <- RankingWeights(numItems = N, priority = "top", steepness = .95)#weights
#grad weights graph
idat<-idat[order(idat$item),]
idat$gradWeights <- gradWeights
ggplot(idat,aes(x=item, y=gradWeights)) + geom_point()
gradWeightGraph <- ggplot(idat,aes(x=item, y=gradWeights)) + geom_point()
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/gradWeightGraph.png", plot = gradWeightGraph)
#5. gradual ranking using our function
gradWeights <- RankingWeights(numItems = N, priority = "top", steepness = .95)#weights
grad_ILResults <- WeightedLossRanking(sampleMatrix = p_post, loss = 2,
rankWeights = gradWeights)
grad_ILRanks <- as.integer(grad_ILResults[[2]])
idat<-idat[order(idat$item),] #we needed to reorder bc of alphabetizing differences
idat$unweightedRanks <- unweightedILRanks
idat$zero_one_rank <- zero_one_ILRanks
idat$zero_one_five <- zero_one_five
idat$grad_rank <- grad_ILRanks
#gradual ranking
t_grad_ranking <- idat[order(idat$grad_rank),c("County", "n", "p", "zero_one_five", "zero_one_rank", "grad_rank")] #sort by unweighted ranks
print(xtable(t_grad_ranking[1:12,], caption = NULL), include.rownames = FALSE) #use \scalebox{0.7}{before tabular
View(idat)
#graphical display of the posterior distributions
library(ggplot2);library(reshape2)
library(RColorBrewer)
#pick conflict area and show posteriors for those counties
conflict_subset <- as.data.frame(post[, c(102, 66, 43, 20, 63, 14, 47)])
#p = exp(-1.12546)/(1+exp(-1.12546))
p_conflict_subset = exp(-2.492716 + conflict_subset)/(1 + exp(-2.492716 + conflict_subset))
#mean(p_post)
#rename
names(p_conflict_subset) <- c("Woodford", "Mercer", "Jo Daviess", "DeKalb", "McHenry", "Clinton", "Kendall")
#pick conflict area and show posteriors for those counties
conflict_subset <- as.data.frame(post[, c(102, 66, 43, 20, 63, 14, 47)])
#p = exp(-1.12546)/(1+exp(-1.12546))
p_conflict_subset = exp(-2.492716 + conflict_subset)/(1 + exp(-2.492716 + conflict_subset))
View(p_conflict_subset)
#mean(p_post)
#rename
names(p_conflict_subset) <- c("Woodford", "Mercer", "Jo Daviess", "DeKalb", "McHenry", "Clinton", "Kendall")
conflict <- melt(p_conflict_subset)
conflict$County <- conflict$variable
cbPalette <- c("#56B4E9", "#009E73", "#F0E442", "#CC79A7", "#000000")
conflictplot <- ggplot(conflict,aes(x=value, fill=County)) + geom_density(alpha=0.3) +
scale_fill_manual(values=cbPalette) + xlab("Percent Low Birth Weight")
conflictplot
#mean(p_post)
#rename
names(p_conflict_subset) <- c("Woodford", "Mercer", "Jo Daviess", "DeKalb", "McHenry", "Clinton", "Kendall")
conflict <- melt(p_conflict_subset)
conflict$County <- conflict$variable
cbPalette <- c("#56B4E9", "#E69F00", "#009E73", "#F0E442", "#000099", "#CC79A7", "#000000")
conflictplot <- ggplot(conflict,aes(x=value, fill=County)) + geom_density(alpha=0.3) +
scale_fill_manual(values=cbPalette) + xlab("Percent Low Birth Weight")
conflictplot
conflictplot <- ggplot(conflict,aes(x=value, fill=County)) + geom_density(alpha=0.3) +
scale_fill_manual(values=cbPalette) + xlab("Percent Low Birth Weight")
conflictplot
conflictplot <- ggplot(conflict,aes(x=value, fill=County)) + geom_density(alpha=0.5) +
scale_fill_manual(values=cbPalette) + xlab("Percent Low Birth Weight")
conflictplot
cbPalette <- c("#000000", "#E69F00", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
conflictplot <- ggplot(conflict,aes(x=value, fill=County)) + geom_density(alpha=0.5) +
scale_fill_manual(values=cbPalette) + xlab("Percent Low Birth Weight")
conflictplot
cbPalette <- c("#000000","#56B4E9","#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
conflictplot <- ggplot(conflict,aes(x=value, fill=County)) + geom_density(alpha=0.5) +
scale_fill_manual(values=cbPalette) + xlab("Percent Low Birth Weight")
conflictplot
cbPalette <- c("#D55E00","#56B4E9","#009E73",  "#000000","#F0E442", "#0072B2", "#CC79A7")
conflictplot <- ggplot(conflict,aes(x=value, fill=County)) + geom_density(alpha=0.5) +
scale_fill_manual(values=cbPalette) + xlab("Percent Low Birth Weight")
conflictplot
conflictplot <- ggplot(conflict,aes(x=value, fill=County)) + geom_density(alpha=0.7) +
scale_fill_manual(values=cbPalette) + xlab("Percent Low Birth Weight")
conflictplot
conflictplot <- ggplot(conflict,aes(x=value, fill=County)) + geom_density(alpha=0.66) +
scale_fill_manual(values=cbPalette) + xlab("Percent Low Birth Weight")
conflictplot
conflictplot <- ggplot(conflict,aes(x=value, fill=County)) + geom_density(alpha=0.66) +
scale_fill_manual(values=cbPalette) + xlab("Percent Low Birth Weight")
conflictplot
conflictplot <- ggplot(conflict,aes(x=value, fill=County)) + geom_density(alpha=0.6) +
scale_fill_manual(values=cbPalette) + xlab("Percent Low Birth Weight")
conflictplot
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/conflict_post.png", plot = conflictplot)
gradWeightGraph <- ggplot(idat,aes(x=item, y=gradWeights)) + geom_point() +
xlab("Rank Position") + ylab("Gradual Weight")
gradWeightGraph
typeof(idat$item)
idat$item <- as.numeric(idat$item)
gradWeightGraph <- ggplot(idat,aes(x=item, y=gradWeights)) + geom_point() +
xlab("Rank Position") + ylab("Gradual Weight")
gradWeightGraph
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/gradWeightGraph.png", plot = gradWeightGraph)
#4. 0-1 weighted ranking
zero_one_rankWeights <- c(rep(1, times = 10), rep(0, times = 92)) #weights
#0-1 weight graph
idat<-idat[order(idat$item),]
idat$gradWeights <- zero_one_rankWeights
idat$item <- as.numeric(idat$item)
idat$zero_one_10 <- zero_one_rankWeights
#0-1 weight graph
idat<-idat[order(idat$item),]
idat$zero_one_10 <- zero_one_rankWeights
idat$item <- as.numeric(idat$item)
idat$item <- as.numeric(idat$item)
Top10WeightGraph <- ggplot(idat,aes(x=item, y=zero_one_10)) + geom_point() +
xlab("Rank Position") + ylab("Top 10 Weight")
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/Top10WeightGraph.png", plot = Top10WeightGraph)
Top10WeightGraph <- ggplot(idat,aes(x=item, y=zero_one_10)) + geom_point() +
xlab("Rank Position") + ylab("Top 10 Weight")
Top10WeightGraph
Top10WeightGraph <- ggplot(idat,aes(x=item, y=zero_one_10)) + geom_point() +
xlab("Rank Position") + ylab("Top 10 Weight") + y_lim(0, 1.5)
Top10WeightGraph <- ggplot(idat,aes(x=item, y=zero_one_10)) + geom_point() +
xlab("Rank Position") + ylab("Top 10 Weight") + ylim(0, 1.5)
Top10WeightGraph
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/Top10WeightGraph.png", plot = Top10WeightGraph)
Top10WeightGraph <- ggplot(idat,aes(x=item, y=zero_one_10)) + geom_point() +
xlab("Rank Position") + ylab("Top 10 Weight") + ylim(0, 1.4)
Top10WeightGraph
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/Top10WeightGraph.png", plot = Top10WeightGraph)
idat$gradWeights <- gradWeights
idat$item <- as.numeric(idat$item)
#0-1 weight graph
idat<-idat[order(idat$item),]
idat$zero_one_10 <- zero_one_rankWeights
idat$item <- as.numeric(idat$item)
Top10WeightGraph <- ggplot(idat,aes(x=item, y=zero_one_10)) + geom_point() +
xlab("Rank Position") + ylab("Top 10 Zero-One Weights") + ylim(0, 1.4)
Top10WeightGraph
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/Top10WeightGraph.png", plot = Top10WeightGraph)
Top10WeightGraph <- ggplot(idat,aes(x=item, y=zero_one_10)) + geom_point() +
xlab("Rank Position") + ylab("Top 10Weights") + ylim(0, 1.4)
Top10WeightGraph <- ggplot(idat,aes(x=item, y=zero_one_10)) + geom_point() +
xlab("Rank Position") + ylab("Top 10 Weights") + ylim(0, 1.4)
Top10WeightGraph
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/Top10WeightGraph.png", plot = Top10WeightGraph)
library(rstan)
#import data
idat <- read.csv("/Users/cora/git_repos/RankingMethods/data/Illinois_LBW_item_n_y.csv")
idat$item <- as.factor(as.numeric(idat$County))
N <- nrow(idat)
#5. gradual ranking using our function
gradWeights <- RankingWeights(numItems = N, priority = "top", steepness = .95)#weights
grad_ILResults <- WeightedLossRanking(sampleMatrix = p_post, loss = 2,
rankWeights = gradWeights)
grad_ILRanks <- as.integer(grad_ILResults[[2]])
idat<-idat[order(idat$item),] #we needed to reorder bc of alphabetizing differences
idat$unweightedRanks <- unweightedILRanks
idat$zero_one_rank <- zero_one_ILRanks
idat$zero_one_five <- zero_one_five
idat$grad_rank <- grad_ILRanks
### Create Graphics for Slides ###
#TODO keep only 1 through 15?
library(xtable)
#gradual ranking
t_grad_ranking <- idat[order(idat$grad_rank),c("County", "n", "p", "zero_one_five", "zero_one_rank", "grad_rank")] #sort by unweighted ranks
print(xtable(t_grad_ranking[1:12,], caption = NULL), include.rownames = FALSE) #use \scalebox{0.7}{before tabular
gradWeightGraph <- ggplot(idat,aes(x=item, y=gradWeights)) + geom_point() +
xlab("Rank Position") + ylab("Gradual Weight") + annotate("epsilon = 0.05", x = 4, y = 25, label = "Some text")
gradWeightGraph
gradWeightGraph <- ggplot(idat,aes(x=item, y=gradWeights)) + geom_point() +
xlab("Rank Position") + ylab("Gradual Weight") + annotate("epsilon = 0.05", x = 75, y = .75, label = "Some text")
gradWeightGraph
gradWeightGraph <- ggplot(idat,aes(x=item, y=gradWeights)) + geom_point() +
xlab("Rank Position") + ylab("Gradual Weight") + annotate("epsilon = 0.05")
gradWeightGraph <- ggplot(idat,aes(x=item, y=gradWeights)) + geom_point() +
xlab("Rank Position") + ylab("Gradual Weight") + geom_text("epsilon = 0.05")
gradWeightGraph <- ggplot(idat,aes(x=item, y=gradWeights)) + geom_point() +
xlab("Rank Position") + ylab("Gradual Weight") +
annotate("text", label = "epsilon = 0.05", x = 75, y = .6, size = 8, colour = "black")
gradWeightGraph
#grad weights graph
idat<-idat[order(idat$item),]
idat$gradWeights <- gradWeights
idat$item <- as.numeric(idat$item)
gradWeightGraph <- ggplot(idat,aes(x=item, y=gradWeights)) + geom_point() +
xlab("Rank Position") + ylab("Gradual Weight") +
annotate("text", label = "epsilon = 0.05", x = 75, y = .6, size = 8, colour = "black")
gradWeightGraph
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/gradWeightGraph.png", plot = gradWeightGraph)
sort(apply(unweightedILResults[[1]],1,which.min))
repeatRanks <- sort(apply(unweightedILResults[[1]],1,which.min))
unique(repeatRanks)
ranks <- seq(1:102, by = 1)
ranks <- seq(from=1, to = 102, by = 1)
as.data.frame(ranks, repeatRanks)
length(repeatRanks)
repeat(ranks)
length(ranks)
as.data.frame(ranks = ranks, repeat = repeatRanks)
as.data.frame(ranks = ranks, rep = repeatRanks)
rep <- cbind(ranks = ranks, repRanks = repeatRanks)
rep <- as.data.frame(cbind(ranks = ranks, repRanks = repeatRanks))
View(rep)
repGraph <- ggplot(rep, aes(x = ranks)) + geom_bar()
repGraph
repGraph <- ggplot(rep, aes(x = ranks, y = repRanks)) + geom_bar()
repGraph
repGraph <- ggplot(rep, aes(x = ranks, y = stat_count(repRanks))) + geom_bar()
repGraph
repGraph <- g <- ggplot(rep, aes(ranks)) + geom_bar()
repGraph
repGraph <- g <- ggplot(rep, aes(repRanks)) + geom_bar()
repGraph
repGraph <- g <- ggplot(rep, aes(repRanks)) + geom_bar() + xlab("Ranks")
repGraph
idat<-idat[order(idat$item),] #we needed to reorder bc of alphabetizing differences
idat$repRanks <- repeatRanks
#repeated ranking
t_repRanks <- idat[order(idat$repRanks),c("County", "n", "p", "repRanks")] #sort by repRanks
print(xtable(t_repRanks[1:12,], caption = NULL), include.rownames = FALSE) #use \scalebox{0.7}{before tabular
repeatRanks <- apply(unweightedILResults[[1]],1,which.min) #repRanks
idat$repRanks <- repeatRanks
#repeated ranking
t_repRanks <- idat[order(idat$repRanks),c("County", "n", "p", "repRanks")] #sort by repRanks
print(xtable(t_repRanks[1:12,], caption = NULL), include.rownames = FALSE) #use \scalebox{0.7}{before tabular
#gradual ranking
t_grad_ranking <- idat[order(idat$grad_rank),c("County", "n", "p", "zero_one_five", "zero_one_rank", "grad_rank")] #sort by unweighted ranks
print(xtable(t_grad_ranking[1:12,], caption = NULL), include.rownames = FALSE) #use \scalebox{0.7}{before tabular
#pick conflict area and show posteriors for those counties
conflict_subset <- as.data.frame(post[, c(102, 66, 14, 47)])
#p = exp(-1.12546)/(1+exp(-1.12546))
p_conflict_subset = exp(-2.492716 + conflict_subset)/(1 + exp(-2.492716 + conflict_subset))
#mean(p_post)
#rename
names(p_conflict_subset) <- c("Woodford", "Mercer", "Clinton", "Kendall")
conflict <- melt(p_conflict_subset)
conflict$County <- conflict$variable
cbPalette <- c("#D55E00","#56B4E9", "#009E73","#000000","#F0E442", "#0072B2", "#CC79A7")
conflictplot <- ggplot(conflict,aes(x=value, fill=County)) + geom_density(alpha=0.6) +
scale_fill_manual(values=cbPalette) + xlab("Percent Low Birth Weight")
conflictplot
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/conflict_post.png", plot = conflictplot)
cbPalette <- c("#D55E00","#56B4E9", "#009E73","#F0E442", "#0072B2", "#CC79A7")
conflictplot <- ggplot(conflict,aes(x=value, fill=County)) + geom_density(alpha=0.6) +
scale_fill_manual(values=cbPalette) + xlab("Percent Low Birth Weight")
conflictplot
cbPalette <- c("#0072B2", "#009E73","#D55E00", "#F0E442",  "#CC79A7")
conflictplot <- ggplot(conflict,aes(x=value, fill=County)) + geom_density(alpha=0.6) +
scale_fill_manual(values=cbPalette) + xlab("Percent Low Birth Weight")
conflictplot
conflictplot <- ggplot(conflict,aes(x=value, fill=County)) + geom_density(alpha=0.6) +
scale_fill_manual(values=cbPalette) + xlab("Percent Low Birth Weight")
conflictplot
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/conflict_post.png", plot = conflictplot)
conflictplot <- ggplot(conflict,aes(x=value, fill=County)) + geom_density(alpha=0.6) +
scale_fill_manual(values=cbPalette) + xlab("Percent Low Birth Weight")
conflictplot
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/conflict_post.png", plot = conflictplot)
conflictplot <- ggplot(conflict,aes(x=value, fill=County)) + geom_density(alpha=0.5) +
scale_fill_manual(values=cbPalette) + xlab("Percent Low Birth Weight")
conflictplot
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/conflict_post.png", plot = conflictplot)
conflictplot <- ggplot(conflict,aes(x=value, fill=County)) + geom_density(alpha=0.5) +
scale_fill_manual(values=cbPalette) + xlab("Percent Low Birth Weight")
conflictplot
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/conflict_post.png", plot = conflictplot)
x <- data.frame(county1=rnorm(10^4, .45, 0.09), county2=rnorm(10^4,.5,0.09), county3=rnorm(10^4,.55, .09))
data<- melt(x)
cbPalette <- c("#56B4E9", "#009E73", "#F0E442", "#CC79A7")
data$County <- data$variable
data$p <- data$value
equalVar <- ggplot(data,aes(x=p, fill=County)) + geom_density(alpha=0.3) +
scale_fill_manual(values=cbPalette) + xlim(0, 1); equalVar
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/equal_var.png", plot = equalVar)
#Unequal Variance Example
x <- data.frame(county1=rnorm(10^4, .45, 0.09), county2=rnorm(10^4,.5,0.09), county3=rnorm(10^4,0.55, 0.18))
data<- melt(x)
data$County <- data$variable
data$p <- data$value
unequalVar <- ggplot(data,aes(x=p, fill=County)) + geom_density(alpha=0.3) +
scale_fill_manual(values=cbPalette) + xlim(0, 1);unequalVar
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/unequal_var.png", plot = unequalVar)
#Unequal Variance Example
x <- data.frame(county1=rnorm(10^4, .45, 0.09), county2=rnorm(10^4,.5,0.09), county3=rnorm(10^4,0.55, 0.18))
data<- melt(x)
data$County <- data$variable
data$p <- data$value
unequalVar <- ggplot(data,aes(x=p, fill=County)) + geom_density(alpha=0.3) +
scale_fill_manual(values=cbPalette) + xlim(0, 1);unequalVar
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/unequal_var.png", plot = unequalVar)
#grad weights graph
idat<-idat[order(idat$item),]
idat$gradWeights <- gradWeights
x <- data.frame(county1=rnorm(10^4, .45, 0.09), county2=rnorm(10^4,.5,0.09), county3=rnorm(10^4,.55, .09))
data<- melt(x)
cbPalette <- c("#56B4E9", "#009E73", "#F0E442", "#CC79A7")
data$County <- data$variable
data$p <- data$value
equalVar <- ggplot(data,aes(x=p, fill=County)) + geom_density(alpha=0.3) +
scale_fill_manual(values=cbPalette) + xlim(0, 1); equalVar
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/equal_var.png", plot = equalVar)
#Unequal Variance Example
x <- data.frame(county1=rnorm(10^4, .45, 0.09), county2=rnorm(10^4,.5,0.09), county3=rnorm(10^4,0.55, 0.18))
#graphical display of the posterior distributions
library(ggplot2);library(reshape2)
library(RColorBrewer)
#pick conflict area and show posteriors for those counties
conflict_subset <- as.data.frame(post[, c(85, 6, 98)]) #RAW POST
#p = exp(-1.12546)/(1+exp(-1.12546))
p_conflict_subset = exp(-2.492716 + conflict_subset)/(1 + exp(-2.492716 + conflict_subset))
#mean(p_post)
#rename
names(p_conflict_subset) <- c("Scott", "Bureau", "Whiteside")
conflict <- melt(p_conflict_subset)
conflict$County <- conflict$variable
conflict$County <- conflict$variable
cbPalette <- c("#0072B2", "#009E73","#D55E00", "#F0E442",  "#CC79A7")
conflictplot2 <- ggplot(conflict,aes(x=value, fill=County)) + geom_density(alpha=0.5) +
scale_fill_manual(values=cbPalette) + xlab("Percent Low Birth Weight")
conflictplot2
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/conflict_post2.png", plot = conflictplot)
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/conflict_post2.png", plot = conflictplot2)
conflictplot2 <- ggplot(conflict,aes(x=value, fill=County)) + geom_density(alpha=0.5) +
scale_fill_manual(values=cbPalette) + xlab("Percent Low Birth Weight")
conflictplot2
conflictplot2 <- ggplot(conflict,aes(x=value, fill=County)) + geom_density(alpha=0.5) +
scale_fill_manual(values=cbPalette) + xlab("Percent Low Birth Weight")
conflictplot2
View(conflict_subset)
#mean(p_post)
#rename
names(p_conflict_subset) <- c("Scott", "Bureau", "Whiteside")
conflict <- melt(p_conflict_subset)
#pick conflict area and show posteriors for those counties
conflict_subset <- as.data.frame(post[, c(85, 6, 98)]) #RAW POST
#p = exp(-1.12546)/(1+exp(-1.12546))
p_conflict_subset = exp(-2.492716 + conflict_subset)/(1 + exp(-2.492716 + conflict_subset))
#mean(p_post)
#rename
names(p_conflict_subset) <- c("Scott", "Bureau", "Whiteside")
View(p_conflict_subset)
#pick conflict area and show posteriors for those counties
conflict_subset <- as.data.frame(post[, c(85, 6, 98)]) #RAW POST
#p = exp(-1.12546)/(1+exp(-1.12546))
p_conflict_subset = exp(-2.492716 + conflict_subset)/(1 + exp(-2.492716 + conflict_subset))
#mean(p_post)
#rename
names(p_conflict_subset) <- c("Scott", "Bureau", "Whiteside")
conflict <- melt(p_conflict_subset)
conflict$County <- conflict$variable
cbPalette <- c("#0072B2", "#009E73","#D55E00", "#F0E442",  "#CC79A7")
conflictplot2 <- ggplot(conflict,aes(x=value, fill=County)) + geom_density(alpha=0.5) +
scale_fill_manual(values=cbPalette) + xlab("Percent Low Birth Weight")
conflictplot2
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/conflict_post2.png", plot = conflictplot2)
e = .05
weights = (1-e)^(k-1)
#weights:
k <- seq(from=0, to = 10, by = 1)
e = 0.5
weights = (1-e)^(k-1)
weights
#weights:
k <- seq(from=1, to = 10, by = 1)
e = 0.5
weights = (1-e)^(k-1)
weights
#weights:
k <- seq(from=1, to = 10, by = 1)
e = 0.5
gradual_ex_weights = (1-e)^(k-1)
gradual_ex_weights
e = 0.05
gradual_ex_weights = (1-e)^(k-1)
gradual_ex_weights
e = 0.9
gradual_ex_weights = (1-e)^(k-1)
gradual_ex_weights
e = 0.8
gradual_ex_weights = (1-e)^(k-1)
gradual_ex_weights
#weights:
k <- seq(from=1, to = 10, by = 1)
e = 0.7
gradual_ex_weights = (1-e)^(k-1)
gradual_ex_weights
e = 0.5
gradual_ex_weights = (1-e)^(k-1)
gradual_ex_weights
e = 0.05
gradual_ex_weights = (1-e)^(k-1)
gradual_ex_weights
e = 0.01
gradual_ex_weights = (1-e)^(k-1)
gradual_ex_weights
##Bottom ranks
e = 0.01
gradual_bottom_ex_weights = (1-e)^(10-k)
gradual_bottom_ex_weights
gradWeightGraph <- ggplot(idat,aes(x=item, y=gradWeights)) + geom_point() +
xlab("Rank Position") + ylab("Gradual Weight") +
xlim(1, 102) +
annotate("text", label = "epsilon = 0.05", x = 75, y = .6, size = 8, colour = "black")
gradWeightGraph
#grad weights graph
idat<-idat[order(idat$item),]
idat$gradWeights <- gradWeights
idat$item <- as.numeric(idat$item)
gradWeightGraph <- ggplot(idat,aes(x=item, y=gradWeights)) + geom_point() +
xlab("Rank Position") + ylab("Gradual Weight") +
xlim(1, 102) +
annotate("text", label = "epsilon = 0.05", x = 75, y = .6, size = 8, colour = "black")
gradWeightGraph
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/gradWeightGraph.png", plot = gradWeightGraph)
gradWeightGraph <- ggplot(idat,aes(x=item, y=gradWeights)) + geom_point() +
xlab("Rank Position") + ylab("Gradual Weight") +
xlim(5, 102) +
annotate("text", label = "epsilon = 0.05", x = 75, y = .6, size = 8, colour = "black")
gradWeightGraph
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/gradWeightGraph.png", plot = gradWeightGraph)
library(rstan)
library(ggplot)
#grad weights graph
idat<-idat[order(idat$item),]
idat$gradWeights <- gradWeights
idat$item <- as.numeric(idat$item)
gradWeightGraph <- ggplot(idat,aes(x=item, y=gradWeights)) + geom_point() +
xlab("Rank Position") + ylab("Gradual Weight") +
xlim(5, 102) +
annotate("text", label = "epsilon = 0.05", x = 75, y = .6, size = 8, colour = "black")
gradWeightGraph
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/gradWeightGraph.png", plot = gradWeightGraph)
#grad weights graph
idat<-idat[order(idat$item),]
idat$gradWeights <- gradWeights
idat$item <- as.numeric(idat$item)
gradWeightGraph <- ggplot(idat,aes(x=item, y=gradWeights)) + geom_point() +
xlab("Rank Position") + ylab("Gradual Weight") +
xlim(1, 102) +
annotate("text", label = "epsilon = 0.05", x = 75, y = .6, size = 8, colour = "black")
gradWeightGraph
ggsave(filename = "/Users/cora/Dropbox/UW-Madison/CurrentResearch/Ranking (noncode)/presentations/JSM/images/gradWeightGraph.png", plot = gradWeightGraph)
##from IllinoisRankings.r
library(rstan)
library(ggplot)
##from IllinoisRankings.r
library(rstan)
library(ggplot)
library(ggplot2)
#import data
idat <- read.csv("/Users/cora/git_repos/RankingMethods/data/Illinois_LBW_item_n_y.csv")
##from IllinoisRankings.r
library(rstan)
library(ggplot2)
#import data
idat <- read.csv("/Users/cora/git_repos/RankingMethods/data/Illinois_LBW_item_n_y.csv")
idat$item <- as.factor(as.numeric(idat$County))
N <- nrow(idat)
#get posterior samples using glmer model
post <- PostSamples(idat)
#convert post to probabilities
p_post <- exp(-2.492716 + post)/(1 + exp(-2.492716 + post))
#1 raw rank
idat<-idat[order(idat$item),] #we needed to reorder bc of alphabetizing differences
idat$rawRank <- as.integer(rank(idat$p)) #checked
idat$rawRank <- as.integer(rank(idat$p)) #checked
#2. posterior mean point estimate ranking
raw_estimates_post_means <- apply(p_post, 2, mean)
idat<-idat[order(idat$item),] #we needed to reorder bc of alphabetizing differences
idat<-idat[order(idat$item),]  #REORDERS we needed to reorder bc of alphabetizing differences
idat$postMeans <- raw_estimates_post_means
idat$pointRank <- as.integer(rank(idat$postMeans)) #checked!
View(idat)
setwd("/Users/cora/git_repos/RankingMethods")
source("ranking_function.r")
settings <- SelectNP(N = 5, a_p = 1, b_p = 1, n_min = 50, n_max=75, a_n = 1, b_n=1, n_assignment_method="ascending")
data <- SimData(settings)
post <- PostSamplesEB(data)
vcov(ranef(post))
vcov(post)
VarCorr(post)
vv <- vcov.merMod(post, corr=TRUE))
vv <- vcov.merMod(post, corr=TRUE)
vv
vv <- vcov.merMod(ranef(post), corr=TRUE)
setwd("/Users/cora/git_repos/RankingMethods")
source("ranking_function.r")
settings <- SelectNP(N = 5, a_p = 1, b_p = 1, n_min = 50, n_max=75, a_n = 1, b_n=1, n_assignment_method="ascending")
data <- SimData(settings)
post <- PostSamplesEB(data)
model <- post
model
vcov(ranef(model))
vcov(model)
VarCorr(model)
ranef(model1, condVar=TRUE)
ranef(model, condVar=TRUE)
vcov(ranef(model, condVar=TRUE))
sd(ranef(model, condVar=TRUE))
var(ranef(model, condVar=TRUE))
vcov(model)
vcov(ranef(model))
model@resp$Lambda
getME(model, "Z")
getME(model, "Lambda")
getME(model, "Lambda")
getME(model, "Lambdat")
