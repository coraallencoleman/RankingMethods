currResults <- as.data.frame(matrix(nrow = 0, ncol = 15))
names(currResults) <- c("sim", "N", "a_p", "b_p", "n_min", "n_max", "a_n", "b_n",
"n_assignment_method",
"rankPriority", "rankSteepness",
"f", "loss", "totalLoss", "ranking")
results <- currResults
#data characteristics
for (n in c(3)){ #numItems
for (n_min in c(50)){ #what really matters here in number of events
for (n_max in c(425)){
#add results to the results df
results <- rbind(results, RunSimulation(N = n, a_p = 1, b_p = 1, n_min = n_min, n_max = n_max, a_n = 1, b_n = 1, #data
n_assignment_method = "ascending",
rankPriority = c("even", "top", "bottom"), rankSteepness = c(0.01, 0.05), #rankWeights
parameter = NULL, loss = c(1,2),
f=identity,  #ranking settings
n_sim = 2,
fileRoot = "/Users/cora/git_repos/RankingMethods/results/"))
}
}
}
#saves results. Careful! This overwrites
save(results, file = "/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_n1_home_0807.RData") #saves as an R object
load("/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_n1_home_0807.RData")
head(results)
## runs experiment using function in ranking_function.r and sim_ranking_experiment.r
#create an .RData file for with parameters + ranks
#run in ranking
setwd("/Users/cora/git_repos/RankingMethods")
source("ranking_function.r")
#creates clean returnDF
currResults <- as.data.frame(matrix(nrow = 0, ncol = 15))
names(currResults) <- c("sim", "N", "a_p", "b_p", "n_min", "n_max", "a_n", "b_n",
"n_assignment_method",
"rankPriority", "rankSteepness",
"f", "loss", "totalLoss", "ranking")
results <- currResults
#data characteristics
for (n in c(3)){ #numItems
for (n_min in c(50)){ #what really matters here in number of events
for (n_max in c(425)){
#add results to the results df
results <- rbind(results, RunSimulation(N = n, a_p = 1, b_p = 1, n_min = n_min, n_max = n_max, a_n = 1, b_n = 1, #data
n_assignment_method = "ascending",
rankPriority = c("even", "top", "bottom"), rankSteepness = c(0.01, 0.05), #rankWeights
parameter = NULL, loss = c(1,2),
f=identity,  #ranking settings
n_sim = 2,
fileRoot = "/Users/cora/git_repos/RankingMethods/results/"))
}
}
}
#saves results. Careful! This overwrites
save(results, file = "/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_n1_home_0807.RData") #saves as an R object
load("/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_n1_home_0807.RData")
head(results)
## runs experiment using function in ranking_function.r and sim_ranking_experiment.r
#create an .RData file for with parameters + ranks
#run in ranking
setwd("/Users/cora/git_repos/RankingMethods")
source("ranking_function.r")
#creates clean returnDF
currResults <- as.data.frame(matrix(nrow = 0, ncol = 15))
names(currResults) <- c("sim", "N", "a_p", "b_p", "n_min", "n_max", "a_n", "b_n",
"n_assignment_method",
"rankPriority", "rankSteepness",
"f", "loss", "totalLoss", "ranking")
results <- currResults
#data characteristics
for (n in c(3)){ #numItems
for (n_min in c(50)){ #what really matters here in number of events
for (n_max in c(425)){
#add results to the results df
results <- rbind(results, RunSimulation(N = n, a_p = 1, b_p = 1, n_min = n_min, n_max = n_max, a_n = 1, b_n = 1, #data
n_assignment_method = "ascending",
rankPriority = c("even", "top", "bottom"), rankSteepness = c(0.01, 0.05), #rankWeights
parameter = NULL, loss = c(1,2),
f=identity,  #ranking settings
n_sim = 2,
fileRoot = "/Users/cora/git_repos/RankingMethods/results/"))
}
}
}
#saves results. Careful! This overwrites
save(results, file = "/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_n1_home_0807.RData") #saves as an R object
load("/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_n1_home_0807.RData")
head(results)
## runs experiment using function in ranking_function.r and sim_ranking_experiment.r
#create an .RData file for with parameters + ranks
#run in ranking
setwd("/Users/cora/git_repos/RankingMethods")
source("ranking_function.r")
#creates clean returnDF
currResults <- as.data.frame(matrix(nrow = 0, ncol = 15))
names(currResults) <- c("sim", "N", "a_p", "b_p", "n_min", "n_max", "a_n", "b_n",
"n_assignment_method",
"rankPriority", "rankSteepness",
"f", "loss", "totalLoss", "ranking")
results <- currResults
#data characteristics
for (n in c(3)){ #numItems
for (n_min in c(50)){ #what really matters here in number of events
for (n_max in c(425)){
#add results to the results df
results <- rbind(results, RunSimulation(N = n, a_p = 1, b_p = 1, n_min = n_min, n_max = n_max, a_n = 1, b_n = 1, #data
n_assignment_method = "ascending",
rankPriority = c("even", "top", "bottom"), rankSteepness = c(0.01, 0.05), #rankWeights
parameter = NULL, loss = c(1,2),
f=identity,  #ranking settings
n_sim = 2,
fileRoot = "/Users/cora/git_repos/RankingMethods/results/"))
}
}
}
#saves results. Careful! This overwrites
save(results, file = "/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_n1_home_0807.RData") #saves as an R object
load("/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_n1_home_0807.RData")
head(results)
## runs experiment using function in ranking_function.r and sim_ranking_experiment.r
#create an .RData file for with parameters + ranks
#run in ranking
setwd("/Users/cora/git_repos/RankingMethods")
source("ranking_function.r")
#creates clean returnDF
currResults <- as.data.frame(matrix(nrow = 0, ncol = 15))
names(currResults) <- c("sim", "N", "a_p", "b_p", "n_min", "n_max", "a_n", "b_n",
"n_assignment_method",
"rankPriority", "rankSteepness",
"f", "loss", "totalLoss", "ranking")
results <- currResults
#data characteristics
for (n in c(3)){ #numItems
for (n_min in c(50)){ #what really matters here in number of events
for (n_max in c(425)){
#add results to the results df
results <- rbind(results, RunSimulation(N = n, a_p = 1, b_p = 1, n_min = n_min, n_max = n_max, a_n = 1, b_n = 1, #data
n_assignment_method = "ascending",
rankPriority = c("even", "top", "bottom"), rankSteepness = c(0.01, 0.05), #rankWeights
parameter = NULL, loss = c(1,2),
f=identity,  #ranking settings
n_sim = 2,
fileRoot = "/Users/cora/git_repos/RankingMethods/results/"))
}
}
}
#saves results. Careful! This overwrites
save(results, file = "/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_n1_home_0807.RData") #saves as an R object
load("/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_n1_home_0807.RData")
head(results)
## runs experiment using function in ranking_function.r and sim_ranking_experiment.r
#create an .RData file for with parameters + ranks
#run in ranking
setwd("/Users/cora/git_repos/RankingMethods")
source("ranking_function.r")
#creates clean returnDF
currResults <- as.data.frame(matrix(nrow = 0, ncol = 15))
names(currResults) <- c("sim", "N", "a_p", "b_p", "n_min", "n_max", "a_n", "b_n",
"n_assignment_method",
"rankPriority", "rankSteepness",
"f", "loss", "totalLoss", "ranking")
results <- currResults
#data characteristics
for (n in c(3)){ #numItems
for (n_min in c(50)){ #what really matters here in number of events
for (n_max in c(425)){
#add results to the results df
results <- rbind(results, RunSimulation(N = n, a_p = 1, b_p = 1, n_min = n_min, n_max = n_max, a_n = 1, b_n = 1, #data
n_assignment_method = "ascending",
rankPriority = c("even", "top", "bottom"), rankSteepness = c(0.01, 0.05), #rankWeights
parameter = NULL, loss = c(1,2),
f=identity,  #ranking settings
n_sim = 2,
fileRoot = "/Users/cora/git_repos/RankingMethods/results/"))
}
}
}
#saves results. Careful! This overwrites
save(results, file = "/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_n1_home_0807.RData") #saves as an R object
load("/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_n1_home_0807.RData")
head(results)
## runs experiment using function in ranking_function.r and sim_ranking_experiment.r
#create an .RData file for with parameters + ranks
#run in ranking
setwd("/Users/cora/git_repos/RankingMethods")
source("ranking_function.r")
#creates clean returnDF
currResults <- as.data.frame(matrix(nrow = 0, ncol = 15))
names(currResults) <- c("sim", "N", "a_p", "b_p", "n_min", "n_max", "a_n", "b_n",
"n_assignment_method",
"rankPriority", "rankSteepness",
"f", "loss", "totalLoss", "ranking")
results <- currResults
#data characteristics
for (n in c(3)){ #numItems
for (n_min in c(50)){ #what really matters here in number of events
for (n_max in c(425)){
#add results to the results df
results <- rbind(results, RunSimulation(N = n, a_p = 1, b_p = 1, n_min = n_min, n_max = n_max, a_n = 1, b_n = 1, #data
n_assignment_method = "ascending",
rankPriority = c("even", "top", "bottom"), rankSteepness = c(0.01, 0.05), #rankWeights
parameter = NULL, loss = c(1,2),
f=identity,  #ranking settings
n_sim = 2,
fileRoot = "/Users/cora/git_repos/RankingMethods/results/"))
}
}
}
#saves results. Careful! This overwrites
save(results, file = "/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_n1_home_0807.RData") #saves as an R object
load("/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_n1_home_0807.RData")
head(results)
## runs experiment using function in ranking_function.r and sim_ranking_experiment.r
#create an .RData file for with parameters + ranks
#run in ranking
setwd("/Users/cora/git_repos/RankingMethods")
source("ranking_function.r")
#creates clean returnDF
currResults <- as.data.frame(matrix(nrow = 0, ncol = 15))
names(currResults) <- c("sim", "N", "a_p", "b_p", "n_min", "n_max", "a_n", "b_n",
"n_assignment_method",
"rankPriority", "rankSteepness",
"f", "loss", "totalLoss", "ranking")
results <- currResults
#data characteristics
for (n in c(3)){ #numItems
for (n_min in c(50)){ #what really matters here in number of events
for (n_max in c(425)){
#add results to the results df
results <- rbind(results, RunSimulation(N = n, a_p = 1, b_p = 1, n_min = n_min, n_max = n_max, a_n = 1, b_n = 1, #data
n_assignment_method = "ascending",
rankPriority = c("even", "top", "bottom"), rankSteepness = c(0.01, 0.05), #rankWeights
parameter = NULL, loss = c(1,2),
f=identity,  #ranking settings
n_sim = 2,
fileRoot = "/Users/cora/git_repos/RankingMethods/results/"))
}
}
}
#saves results. Careful! This overwrites
save(results, file = "/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_n1_home_0807.RData") #saves as an R object
load("/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_n1_home_0807.RData")
head(results)
## runs experiment using function in ranking_function.r and sim_ranking_experiment.r
#create an .RData file for with parameters + ranks
#run in ranking
setwd("/Users/cora/git_repos/RankingMethods")
source("ranking_function.r")
#creates clean returnDF
currResults <- as.data.frame(matrix(nrow = 0, ncol = 15))
names(currResults) <- c("sim", "N", "a_p", "b_p", "n_min", "n_max", "a_n", "b_n",
"n_assignment_method",
"rankPriority", "rankSteepness",
"f", "loss", "totalLoss", "ranking")
results <- currResults
#data characteristics
for (n in c(3)){ #numItems
for (n_min in c(50)){ #what really matters here in number of events
for (n_max in c(425)){
#add results to the results df
results <- rbind(results, RunSimulation(N = n, a_p = 1, b_p = 1, n_min = n_min, n_max = n_max, a_n = 1, b_n = 1, #data
n_assignment_method = "ascending",
rankPriority = c("even", "top", "bottom"), rankSteepness = c(0.01, 0.05), #rankWeights
parameter = NULL, loss = c(1,2),
f=identity,  #ranking settings
n_sim = 2,
fileRoot = "/Users/cora/git_repos/RankingMethods/results/"))
}
}
}
#saves results. Careful! This overwrites
save(results, file = "/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_n1_home_0807.RData") #saves as an R object
load("/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_n1_home_0807.RData")
head(results)
## runs experiment using function in ranking_function.r and sim_ranking_experiment.r
#create an .RData file for with parameters + ranks
#run in ranking
setwd("/Users/cora/git_repos/RankingMethods")
source("ranking_function.r")
#creates clean returnDF
currResults <- as.data.frame(matrix(nrow = 0, ncol = 15))
names(currResults) <- c("sim", "N", "a_p", "b_p", "n_min", "n_max", "a_n", "b_n",
"n_assignment_method",
"rankPriority", "rankSteepness",
"f", "loss", "totalLoss", "ranking")
results <- currResults
#data characteristics
for (n in c(3)){ #numItems
for (n_min in c(50)){ #what really matters here in number of events
for (n_max in c(425)){
#add results to the results df
results <- rbind(results, RunSimulation(N = n, a_p = 1, b_p = 1, n_min = n_min, n_max = n_max, a_n = 1, b_n = 1, #data
n_assignment_method = "ascending",
rankPriority = c("even", "top", "bottom"), rankSteepness = c(0.01, 0.05), #rankWeights
parameter = NULL, loss = c(1,2),
f=identity,  #ranking settings
n_sim = 2,
fileRoot = "/Users/cora/git_repos/RankingMethods/results/"))
}
}
}
#saves results. Careful! This overwrites
save(results, file = "/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_n1_home_0807.RData") #saves as an R object
load("/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_n1_home_0807.RData")
head(results)
as.data.frame(                      rw rankPriority rankSteepness
1                1, 1, 1         even          0.01
2                1, 1, 1         even          0.05
3    1e+00, 1e-02, 1e-04          top          0.01
4 1.0000, 0.0500, 0.0025          top          0.05
5    1e-04, 1e-02, 1e+00       bottom          0.01
6 0.0025, 0.0500, 1.0000       bottom          0.05)
#testing
RunSimulation(N = 3, a_p = 1, b_p = 1, n_min = 10, n_max = 20, a_n = 1, b_n = 1, #data
n_assignment_method = "ascending",
rankPriority = c("even", "top", "bottom"), rankSteepness = c(0.01, 0.05), #rankWeights
parameter = NULL, loss = c(1,2),
f=identity,  #ranking settings
n_sim = 2,
fileRoot = "/Users/cora/git_repos/RankingMethods/results/"))
#testing
RunSimulation(N = 3, a_p = 1, b_p = 1, n_min = 10, n_max = 20, a_n = 1, b_n = 1, #data
n_assignment_method = "ascending",
rankPriority = c("even", "top", "bottom"), rankSteepness = c(0.01, 0.05), #rankWeights
parameter = NULL, loss = c(1,2),
f=identity,  #ranking settings
n_sim = 2,
fileRoot = "/Users/cora/git_repos/RankingMethods/results/")
#run in ranking
setwd("/Users/cora/git_repos/RankingMethods")
source("ranking_function.r")
#creates clean returnDF
currResults <- as.data.frame(matrix(nrow = 0, ncol = 15))
names(currResults) <- c("sim", "N", "a_p", "b_p", "n_min", "n_max", "a_n", "b_n",
"n_assignment_method",
"rankPriority", "rankSteepness",
"f", "loss", "totalLoss", "ranking")
results <- currResults
#testing
df <- RunSimulation(N = 3, a_p = 1, b_p = 1, n_min = 10, n_max = 20, a_n = 1, b_n = 1, #data
n_assignment_method = "ascending",
rankPriority = c("even", "top", "bottom"), rankSteepness = c(0.01, 0.05), #rankWeights
parameter = NULL, loss = c(1,2),
f=identity,  #ranking settings
n_sim = 2,
fileRoot = "/Users/cora/git_repos/RankingMethods/results/")
df
typeof(df$rw)
df[rankPriority == rp  & rankSteepness == rs,]$rw
df[rankPriority == "even"  & rankSteepness == 0.01,]$rw
df[rankPriority == "even"  & rankSteepness == 0.01,]
df[rankPriority == "even" && rankSteepness == 0.01,]
df
df[rankPriority == "even", ]
df[,rankPriority == "even"]
df[df$rankPriority == "even",]
filter(df, rankPriority == rp, rankSteepness == rs)
filter(df, rankPriority == "even", rankSteepness == 0.01)
filter(df, rankPriority == "even", rankSteepness == 0.01)$rw
filter(df, rankPriority == "even", rankSteepness == 0.01)$rw[[1]]
## runs experiment using function in ranking_function.r and sim_ranking_experiment.r
#create an .RData file for with parameters + ranks
#run in ranking
setwd("/Users/cora/git_repos/RankingMethods")
source("ranking_function.r")
#creates clean returnDF
currResults <- as.data.frame(matrix(nrow = 0, ncol = 15))
names(currResults) <- c("sim", "N", "a_p", "b_p", "n_min", "n_max", "a_n", "b_n",
"n_assignment_method",
"rankPriority", "rankSteepness",
"f", "loss", "totalLoss", "ranking")
results <- currResults
#data characteristics
for (n in c(3)){ #numItems
for (n_min in c(50)){ #what really matters here in number of events
for (n_max in c(425)){
#add results to the results df
results <- rbind(results, RunSimulation(N = n, a_p = 1, b_p = 1, n_min = n_min, n_max = n_max, a_n = 1, b_n = 1, #data
n_assignment_method = "ascending",
rankPriority = c("even", "top", "bottom"), rankSteepness = c(0.01, 0.05), #rankWeights
parameter = NULL, loss = c(1,2),
f=identity,  #ranking settings
n_sim = 2,
fileRoot = "/Users/cora/git_repos/RankingMethods/results/"))
}
}
}
#saves results. Careful! This overwrites
save(results, file = "/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_n1_home_0807.RData") #saves as an R object
load("/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_n1_home_0807.RData")
head(results)
# #testing
# df <- RunSimulation(N = 3, a_p = 1, b_p = 1, n_min = 10, n_max = 20, a_n = 1, b_n = 1, #data
#               n_assignment_method = "ascending",
#               rankPriority = c("even", "top", "bottom"), rankSteepness = c(0.01, 0.05), #rankWeights
#               parameter = NULL, loss = c(1,2),
#               f=identity,  #ranking settings
#               n_sim = 2,
#               fileRoot = "/Users/cora/git_repos/RankingMethods/results/")
## runs experiment using function in ranking_function.r and sim_ranking_experiment.r
#create an .RData file for with parameters + ranks
#run in ranking
setwd("/Users/cora/git_repos/RankingMethods")
source("ranking_function.r")
#creates clean returnDF
currResults <- as.data.frame(matrix(nrow = 0, ncol = 15))
names(currResults) <- c("sim", "N", "a_p", "b_p", "n_min", "n_max", "a_n", "b_n",
"n_assignment_method",
"rankPriority", "rankSteepness",
"f", "loss", "totalLoss", "ranking")
results <- currResults
#data characteristics
for (n in c(5)){ #numItems
for (n_min in c(50)){ #what really matters here in number of events
for (n_max in c(425)){
#add results to the results df
results <- rbind(results, RunSimulation(N = n, a_p = 1, b_p = 1, n_min = n_min, n_max = n_max, a_n = 1, b_n = 1, #data
n_assignment_method = "ascending",
rankPriority = c("even", "top", "bottom"), rankSteepness = c(0.01, 0.05), #rankWeights
parameter = NULL, loss = c(1,2),
f=identity,  #ranking settings
n_sim = 2,
fileRoot = "/Users/cora/git_repos/RankingMethods/results/"))
}
}
}
#saves results. Careful! This overwrites
save(results, file = "/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_n1_home_0807.RData") #saves as an R object
load("/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_n1_home_0807.RData")
head(results)
# #testing
# df <- RunSimulation(N = 3, a_p = 1, b_p = 1, n_min = 10, n_max = 20, a_n = 1, b_n = 1, #data
#               n_assignment_method = "ascending",
#               rankPriority = c("even", "top", "bottom"), rankSteepness = c(0.01, 0.05), #rankWeights
#               parameter = NULL, loss = c(1,2),
#               f=identity,  #ranking settings
#               n_sim = 2,
#               fileRoot = "/Users/cora/git_repos/RankingMethods/results/")
View(results)
## runs experiment using function in ranking_function.r and sim_ranking_experiment.r
#create an .RData file for with parameters + ranks
#run in ranking
setwd("/Users/cora/git_repos/RankingMethods")
source("ranking_function.r")
#creates clean returnDF
currResults <- as.data.frame(matrix(nrow = 0, ncol = 15))
names(currResults) <- c("sim", "N", "a_p", "b_p", "n_min", "n_max", "a_n", "b_n",
"n_assignment_method",
"rankPriority", "rankSteepness",
"f", "loss", "totalLoss", "ranking")
results <- currResults
#data characteristics
for (n in c(25, 50, 100)){ #numItems
for (n_min in c(75, 100)){ #what really matters here in number of events
for (n_max in c(200, 400)){
for (a_n in c(0.8, 1, 1.2)){
for (b_n in c(0.8, 1, 1.2)){
for (a_p in c(0.8, 1, 1.2)){
for (b_p in c(0.8, 1, 1.2)){
#add results to the results df
results <- rbind(results, RunSimulation(N = n, a_p = a_p, b_p = b_p, n_min = n_min, n_max = n_max, a_n = a_n, b_n = b_n, #data
n_assignment_method = "ascending",
#ranking settings
rankPriority = c("even", "top", "bottom"), rankSteepness = c(0.01, 0.05, 0.1), #rankWeights
parameter = NULL, loss = c(1,2),
f=identity,
n_sim = 1,
fileRoot = "/Users/cora/git_repos/RankingMethods/results/"))
}
}
}
}
}
}
}
#saves results. Careful! This overwrites
save(results, file = "/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_0807.RData.RData") #saves as an R object
load("/Users/cora/git_repos/RankingMethods/results/ranking_experiment_results_0807.RData")
head(results)
View(results)
View(results)
View(results)
View(results)
View(results)
setwd("/Users/cora/git_repos/RankingMethods")
source("ranking_function.r")
setwd("/Users/cora/git_repos/RankingMethods")
source("ranking_function.r")
source("ranking_function.r")
source("ranking_function.r")
setwd("/Users/cora/git_repos/RankingMethods")
source("ranking_function.r")
settings <- SelectNP(N = 5, a_p = 1, b_p = 1, n_min = 50, n_max=75, a_n = 1, b_n=1, n_assignment_method="ascending")
data <- SimData(settings)
post <- PostSamplesEB(data)
source("ranking_function.r")
settings <- SelectNP(N = 5, a_p = 1, b_p = 1, n_min = 50, n_max=75, a_n = 1, b_n=1, n_assignment_method="ascending")
data <- SimData(settings)
post <- PostSamplesEB(data)
settings <- SelectNP(N = 5, a_p = 1, b_p = 1, n_min = 50, n_max=75, a_n = 1, b_n=1, n_assignment_method="ascending")
data <- SimData(settings)
post <- PostSamplesEB(data)
source("ranking_function.r")
settings <- SelectNP(N = 5, a_p = 1, b_p = 1, n_min = 50, n_max=75, a_n = 1, b_n=1, n_assignment_method="ascending")
data <- SimData(settings)
post <- PostSamplesEB(data)
source("ranking_function.r")
settings <- SelectNP(N = 5, a_p = 1, b_p = 1, n_min = 50, n_max=75, a_n = 1, b_n=1, n_assignment_method="ascending")
data <- SimData(settings)
post <- PostSamplesEB(data)
post
post$ranef
ranef(post)
