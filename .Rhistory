##Two Level Normal Model n = 5 ##
#using subset of from Assignment 2 in MultilevelModels class
#data
math <- read.csv("/Users/cora/HardDriveDocuments/UW-Madison/Courses/Spring2018/MultilevelModels/Assignments/assignment2/hw02.csv", header = TRUE)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
math_data = list(
N = nrow(math),
J = with(math,length(unique(School))),
y = with(math, Score),
x = with(math, SES),
school = with(math,as.integer(as.factor(School))) #goes in numeric order, but shifts them up so that all starting at 1
)
View(math_data)
View(math)
##Two Level Normal Model n = 5 ##
#using subset of from Assignment 2 in MultilevelModels class
#data
math <- read.csv("/Users/cora/HardDriveDocuments/UW-Madison/Courses/Spring2018/MultilevelModels/Assignments/assignment2/hw02.csv", header = TRUE)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
math_data = list(
N = nrow(math),
J = with(math,length(unique(School))),
y = with(math, Score),
x = with(math, SES),
school = with(math,as.integer(as.factor(School))) #goes in numeric order, but shifts them up so that all starting at 1
)
normal_model <- stan(file="/Users/cora/git_repos/RankingMethods/normal_two_level.stan",data=jsp_data, seed=10)
#Testing for WeightedLossRanking function
#load libraries
library(rstan)
normal_model <- stan(file="/Users/cora/git_repos/RankingMethods/normal_two_level.stan",data=jsp_data, seed=10)
normal_model <- stan(file="/Users/cora/git_repos/RankingMethods/normal_two_level.stan",data=math, seed=10)
normal_model <- stan(file="/Users/cora/git_repos/RankingMethods/normal_two_level.stan",data=math, seed=10)
##Two Level Normal Model n = 5 ##
#using subset of from Assignment 2 in MultilevelModels class
#data
math <- read.csv("/Users/cora/HardDriveDocuments/UW-Madison/Courses/Spring2018/MultilevelModels/Assignments/assignment2/hw02.csv", header = TRUE)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
math_data = list(
N = nrow(math),
J = with(math,length(unique(School))),
y = with(math, Score),
x = with(math, SES),
school = with(math,as.integer(as.factor(School))) #goes in numeric order, but shifts them up so that all starting at 1
)
normal_model <- stan(file="/Users/cora/git_repos/RankingMethods/normal_two_level.stan",data=math, seed=10)
##Two Level Normal Model n = 5 ##
#using subset of from Assignment 2 in MultilevelModels class
#data
math <- read.csv("/Users/cora/HardDriveDocuments/UW-Madison/Courses/Spring2018/MultilevelModels/Assignments/assignment2/hw02.csv", header = TRUE)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
math_data = list(
N = nrow(math),
J = with(math,length(unique(School))),
y = with(math, Score),
school = with(math,as.integer(as.factor(School))) #goes in numeric order, but shifts them up so that all starting at 1
)
normal_model <- stan(file="/Users/cora/git_repos/RankingMethods/normal_two_level.stan",data=math, seed=10)
View(math_data)
math_data = list(
N = nrow(math),
J = with(math,length(unique(School))),
y = with(math, Score),
school = with(math,as.integer(as.factor(School))) #goes in numeric order, but shifts them up so that all starting at 1
)
normal_model <- stan(file="/Users/cora/git_repos/RankingMethods/normal_two_level.stan",data=math, seed=10)
normal_model <- stan(file="/Users/cora/git_repos/RankingMethods/normal_two_level.stan",data=math, seed=10)
#Testing for WeightedLossRanking function
#load libraries
library(rstan)
##Two Level Normal Model n = 5 ##
#using subset of from Assignment 2 in MultilevelModels class
#data
math <- read.csv("/Users/cora/HardDriveDocuments/UW-Madison/Courses/Spring2018/MultilevelModels/Assignments/assignment2/hw02.csv", header = TRUE)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
math_data = list(
N = nrow(math),
J = with(math,length(unique(School))),
y = with(math, Score),
school = with(math,as.integer(as.factor(School))) #goes in numeric order, but shifts them up so that all starting at 1
)
normal_model <- stan(file="/Users/cora/git_repos/RankingMethods/normal_two_level.stan",data=math, seed=10)
normal_model <- stan(file="/Users/cora/git_repos/RankingMethods/normal_two_level.stan",data=math, seed=10)
normal_model <- stan(file="/Users/cora/git_repos/RankingMethods/normal_two_level.stan",data=math, seed=10)
normal_model <- stan(file="/Users/cora/git_repos/RankingMethods/normal_two_level.stan",data=math, seed=10)
normal_model <- stan(file="/Users/cora/git_repos/RankingMethods/normal_two_level.stan",data=math, seed=10)
##Two Level Normal Model n = 5 ##
#using subset of from Assignment 2 in MultilevelModels class
#data
math <- read.csv("/Users/cora/HardDriveDocuments/UW-Madison/Courses/Spring2018/MultilevelModels/Assignments/assignment2/hw02.csv", header = TRUE)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
math_data = list(
N = nrow(math),
J = with(math,length(unique(School))),
y = with(math, Score),
x = with(math, SES),
school = with(math,as.integer(as.factor(School))) #goes in numeric order, but shifts them up so that all starting at 1
)
normal_model <- stan(file="/Users/cora/git_repos/RankingMethods/normal_two_level.stan",data=math, seed=10)
##Two Level Normal Model n = 5 ##
#using subset of from Assignment 2 in MultilevelModels class
#data
math <- read.csv("/Users/cora/HardDriveDocuments/UW-Madison/Courses/Spring2018/MultilevelModels/Assignments/assignment2/hw02.csv", header = TRUE)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
math_data = list(
N = nrow(math),
J = with(math,length(unique(School))),
y = with(math, Score),
x = with(math, SES),
school = with(math,as.integer(as.factor(School))) #goes in numeric order, but shifts them up so that all starting at 1
)
normal_model <- stan(file="/Users/cora/git_repos/RankingMethods/normal_two_level.stan",data=math_data, seed=10)
##Two Level Normal Model n = 5 ##
#using subset of from Assignment 2 in MultilevelModels class
#data
math <- read.csv("/Users/cora/HardDriveDocuments/UW-Madison/Courses/Spring2018/MultilevelModels/Assignments/assignment2/hw02.csv", header = TRUE)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
math_data = list(
N = nrow(math),
J = with(math,length(unique(School))),
y = with(math, Score),
school = with(math,as.integer(as.factor(School))) #goes in numeric order, but shifts them up so that all starting at 1
)
normal_model <- stan(file="/Users/cora/git_repos/RankingMethods/normal_two_level.stan",data=math_data, seed=10)
