## program data cleaning
#Longitudinal Analysis
require(tidyverse)
## Data Cleaning ##
program_data <- read.csv("/Users/cora/git_repos/seminarAnalysis/program_data.csv", stringsAsFactors = FALSE)
program_yearly <- program_data[2:22, c(1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17)]
colnames(program_yearly) <- c("year", "numWomen", "numMen", "matWomen", "matMen", "gradWomen",
"gradMen", "withWomen", "withMen", "sympStudWomen", "sympStudMen",
"sympKeyWomen", "sympKeyMen", "sympFacWomen", "sympFacMen")
program_yearly[,-1] <- mutate_all(program_yearly[,-1], function(x) as.numeric(x))
program_yearly$year <- as.numeric(substring(program_yearly$year,1,4))
#separate data sets
yearly_1 <- gather(program_yearly, genderMeasure, count, numWomen:sympFacMen, factor_key=TRUE)
total <- dplyr::filter(yearly_1, yearly_1$genderMeasure %in% c("numWomen", "numMen"))
# withdrawal data
w_data <- data.frame(year = rep(total$year, total$count),
gender = rep(total$genderMeasure, total$count))
w_data$gender <- ifelse(w_data$gender == "numWomen", "f", "m")
w_data$with <- rep(0, times = nrow(w_data))
with <- dplyr::filter(yearly_1, yearly_1$genderMeasure %in% c("withWomen", "withMen"))
for (year in with$year){ #WOMEN WITH
if (with[with$year == year & with$genderMeasure == "withWomen",]$count !=0){
for (i in 1:with[with$year == year & with$genderMeasure == "withWomen",]$count){
#w_data[w_data$year == year & w_data$gender == "f", ][i]
w_data[w_data$year == year & w_data$gender == "f", ]$with[i] <- 1
}
}
}
for (year in with$year){ #MEN WITH
if (with[with$year == year & with$genderMeasure == "withMen",]$count !=0){
for (i in 1:with[with$year == year & with$genderMeasure == "withMen",]$count){
w_data[w_data$year == year & w_data$gender == "m", ]$with[i] <- 1
}
}
}
#TYPES MD and full withdrawal data
#remove all not withdrawn to MD (6 events only now)
w_data$MDWithdrawal <- rep(0, times = nrow(w_data))
w_data[w_data$with == 1,]$MDWithdrawal <- c(0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1)
w_data$FullWithdrawal <- rep(0, times = nrow(w_data))
w_data[w_data$with == 1,]$FullWithdrawal <- c(1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0)
## graduation rates ##
g_data <- data.frame(year = rep(total$year, total$count),
gender = rep(total$genderMeasure, total$count))
g_data$gender <- ifelse(g_data$gender == "numWomen", "f", "m")
g_data$grad <- rep(0, times = nrow(g_data))
grad <- dplyr::filter(yearly_1, yearly_1$genderMeasure %in% c("gradWomen", "gradMen"))
for (year in grad$year){ #WOMEN grad
if (grad[grad$year == year & grad$genderMeasure == "gradWomen",]$count !=0){
for (i in 1:grad[grad$year == year & grad$genderMeasure == "gradWomen",]$count){
#g_data[g_data$year == year & g_data$gender == "f", ][i]
g_data[g_data$year == year & g_data$gender == "f", ]$grad[i] <- 1
}
}
}
for (year in grad$year){ #MEN grad
if (grad[grad$year == year & grad$genderMeasure == "gradMen",]$count !=0){
for (i in 1:grad[grad$year == year & grad$genderMeasure == "gradMen",]$count){
g_data[g_data$year == year & g_data$gender == "m", ]$grad[i] <- 1
}
}
}
## symposium ##
sympStudent_data <- data.frame(year = rep(total$year, total$count),
gender = rep(total$genderMeasure, total$count))
sympStudent_data$gender <- ifelse(sympStudent_data$gender == "numWomen", "f", "m")
sympStudent_data$sympStud <- rep(0, times = nrow(sympStudent_data))
sympStud <- dplyr::filter(yearly_1, yearly_1$genderMeasure %in% c("sympStudWomen", "sympStudMen"))
for (year in sympStud$year){ #WOMEN sympStud
if (sympStud[sympStud$year == year & sympStud$genderMeasure == "sympStudWomen",]$count !=0){
for (i in 1:sympStud[sympStud$year == year & sympStud$genderMeasure == "sympStudWomen",]$count){
#sympStudent_data[sympStudent_data$year == year & sympStudent_data$gender == "f", ][i]
sympStudent_data[sympStudent_data$year == year & sympStudent_data$gender == "f", ]$sympStud[i] <- 1
}
}
}
for (year in sympStud$year){ #MEN sympStud
if (sympStud[sympStud$year == year & sympStud$genderMeasure == "sympStudMen",]$count !=0){
for (i in 1:sympStud[sympStud$year == year & sympStud$genderMeasure == "sympStudMen",]$count){
sympStudent_data[sympStudent_data$year == year & sympStudent_data$gender == "m", ]$sympStud[i] <- 1
}
}
}
##SUMMARIZE ##
program_yearly <- mutate(program_yearly, numWomenRatio = numWomen/(numWomen+numMen))
program_yearly <- mutate(program_yearly, matWomenRate = matWomen/(matWomen+matMen))
program_yearly <- mutate(program_yearly, gradWomenRate = gradWomen/(gradWomen+gradMen))
program_yearly <- mutate(program_yearly, WomenWithRate = withWomen/numWomen)
program_yearly <- mutate(program_yearly, MenWithRate = withMen/numMen)
program_yearly <- mutate(program_yearly, sympStudWomenRate = sympStudWomen/numWomen)
program_yearly <- mutate(program_yearly, sympStudMenRate = sympStudMen/numMen)
is.nan.data.frame <- function(x)
do.call(cbind, lapply(x, is.nan))
program_yearly[is.nan(program_yearly)] <- 0
#students
#Does your gender affect your probability of giving a student symposium talk?
m1_sympStud <- glm(sympStud ~ gender + year + gender*year, family = binomial(), data = sympStudent_data)
summary(m1_sympStud)
plot(m1_sympStud)
View(sympStudent_data)
View(sympStud)
View(total)
View(yearly_1)
##KEYNOTE
sympKey_data <- data.frame(year = rep(total$year, total$count),
gender = rep(total$genderMeasure, total$count))
sympKey_data$gender <- ifelse(sympKey_data$gender == "numWomen", "f", "m")
sympKey_data$sympKey <- rep(0, times = nrow(sympKey_data))
sympKey <- dplyr::filter(yearly_1, yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"))
for (year in sympKey$year){ #WOMEN sympKey
if (sympKey[sympKey$year == year & sympKey$genderMeasure == "sympKeyWomen",]$count !=0){
for (i in 1:sympKey[sympKey$year == year & sympKey$genderMeasure == "sympKeyWomen",]$count){
#sympKey_data[sympKey_data$year == year & sympKey_data$gender == "f", ][i]
sympKey_data[sympKey_data$year == year & sympKey_data$gender == "f", ]$sympKey[i] <- 1
}
}
}
for (year in sympKey$year){ #MEN sympKey
if (sympKey[sympKey$year == year & sympKey$genderMeasure == "sympKeyMen",]$count !=0){
for (i in 1:sympKey[sympKey$year == year & sympKey$genderMeasure == "sympKeyMen",]$count){
sympKey_data[sympKey_data$year == year & sympKey_data$gender == "m", ]$sympKey[i] <- 1
}
}
}
View(sympKey_data)
yearl_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen")]
yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen")]
yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen")
yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]
rep(total$year, total$count)
yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]
yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$yer
yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$year
yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]
nrow(yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),])
20171997
2017-1997
rep(yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$year,
yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$count)
rep(yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$year,
yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$count)
rep(yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$year,
times = yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$count)
rep(yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$year, times = yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$count)
rep(yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$year, times = yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$count)
yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$year
sympKey_data <- data.frame(year =
yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$year,
gender = rep(yearly_1$genderMeasure, yearly_1$count))
yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$year
rep(yearly_1$genderMeasure, yearly_1$count)
##KEYNOTE
#yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]
sympKey_data <- data.frame(year =
yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$year,
gender = rep(yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$genderMeasure,
yearly_1yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$count))
##KEYNOTE
#yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]
sympKey_data <- data.frame(year =
yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$year,
gender = rep(yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$genderMeasure,
yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$count))
yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$year
gender = rep(yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$genderMeasure,
yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$count))
yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$genderMeasure
##KEYNOTE
#yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]
sympKey_data <- data.frame(year =
yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$year,
gender = yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$genderMeasure)
View(sympKey_data)
sympKey_data$gender <- ifelse(sympKey_data$gender == "sympKeyWomen", "f", "m")
yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]
##KEYNOTE
#yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]
sympKey_data <- yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$genderMeasure)
##KEYNOTE
#yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]
sympKey_data <- yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]$genderMeasure
##KEYNOTE
#yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]
sympKey_data <- yearly_1[yearly_1$genderMeasure %in% c("sympKeyWomen", "sympKeyMen"),]
#keynote
m1_sympKey <- glm(count ~ genderMeasure + year + genderMeasure*year, family = binomial(), data = sympKey_data)
summary(m1_sympKey)
View(program_yearly)
program_yearly <- mutate(program_yearly, sympKeyWomenRate = sympKeyWomen/(sympKeyWomen + sympKeyMen)
program_yearly <- mutate(program_yearly, sympKeyWomenRate = sympKeyWomen/(sympKeyWomen + sympKeyMen))
program_yearly <- mutate(program_yearly, sympKeyWomenRate = sympKeyWomen/(sympKeyWomen + sympKeyMen))
mutate(program_yearly, sympKeyWomenRate = sympKeyWomen)
mutate(program_yearly, sympKeyWomenRate = sympKeyMen)
program_yearly <- mutate(program_yearly, sympKeyWomenRate = sympKeyWomen/(sympKeyWomen + sympKeyMen))
sum(program_yearly)
sum(program_yearly$sympKeyWomenRate)
program_yearly$sympKeyWomenRate
sum(sympKey)
sum(sympKey_data)
sum(sympKey_data$count)
#times keynote was by a man. chi square test cause this is yes/no vs male/female
M <- as.table(c(4, 15)) #total = 19
dimnames(M) <- list(gender = c("F", "M"),
speaker = c("Yes"))
#times keynote was by a man. chi square test cause this is yes/no vs male/female
M <- as.table(c(4, 15)) #total = 19
dimnames(M) <- list(gender = c("F", "M"))
M
(Xsq <- chisq.test(M))
x <- c(A = 20, B = 15, C = 25)
chisq.test(x)
#students
#Does your gender affect your probability of giving a student symposium talk?
m1_sympStud <- glm(sympStud ~ gender + year + gender*year, family = binomial(), data = sympStudent_data)
summary(m1_sympStud)
View(program_data)
View(total)
##Faculty Data
total <- dplyr::filter(yearly_1, yearly_1$genderMeasure %in% c("sympFacWomen", "sympFacMen"))
total <- dplyr::filter(yearly_1, yearly_1$genderMeasure %in% c("sympFacWomen", "sympFacMen"))
sympFac_data <- data.frame(year = rep(total$year, total$count),
gender = rep(total$genderMeasure, total$count))
sympFac_data$gender <- ifelse(sympFac_data$gender == "sympFacWomen", "f", "m")
sympFac_data$sympFac <- rep(0, times = nrow(sympFac_data))
sympFac <- dplyr::filter(yearly_1, yearly_1$genderMeasure %in% c("sympFacWomen", "sympFacMen"))
for (year in sympFac$year){ #WOMEN sympFac
if (sympFac[sympFac$year == year & sympFac$genderMeasure == "sympFacWomen",]$count !=0){
for (i in 1:sympFac[sympFac$year == year & sympFac$genderMeasure == "sympFacWomen",]$count){
#sympFacent_data[sympFacent_data$year == year & sympFacent_data$gender == "f", ][i]
sympFac_data[sympFac_data$year == year & sympFac_data$gender == "f", ]$sympFac[i] <- 1
}
}
}
for (year in sympFac$year){ #MEN sympFac
if (sympFac[sympFac$year == year & sympFac$genderMeasure == "sympFacMen",]$count !=0){
for (i in 1:sympFac[sympFac$year == year & sympFac$genderMeasure == "sympFacMen",]$count){
sympFac_data[sympFac_data$year == year & sympFac_data$gender == "m", ]$sympStud[i] <- 1
}
}
}
##Faculty Data
total <- dplyr::filter(yearly_1, yearly_1$genderMeasure %in% c("sympFacWomen", "sympFacMen"))
sympFac_data <- data.frame(year = rep(total$year, total$count),
gender = rep(total$genderMeasure, total$count))
sympFac_data$gender <- ifelse(sympFac_data$gender == "sympFacWomen", "f", "m")
sympFac_data$sympFac <- rep(0, times = nrow(sympFac_data))
sympFac <- dplyr::filter(yearly_1, yearly_1$genderMeasure %in% c("sympFacWomen", "sympFacMen"))
for (year in sympFac$year){ #WOMEN sympFac
if (sympFac[sympFac$year == year & sympFac$genderMeasure == "sympFacWomen",]$count !=0){
for (i in 1:sympFac[sympFac$year == year & sympFac$genderMeasure == "sympFacWomen",]$count){
#sympFacent_data[sympFacent_data$year == year & sympFacent_data$gender == "f", ][i]
sympFac_data[sympFac_data$year == year & sympFac_data$gender == "f", ]$sympFac[i] <- 1
}
}
}
for (year in sympFac$year){ #MEN sympFac
if (sympFac[sympFac$year == year & sympFac$genderMeasure == "sympFacMen",]$count !=0){
for (i in 1:sympFac[sympFac$year == year & sympFac$genderMeasure == "sympFacMen",]$count){
sympFac_data[sympFac_data$year == year & sympFac_data$gender == "m", ]$sympStud[i] <- 1
}
}
}
for (year in sympFac$year){ #MEN sympFac
if (sympFac[sympFac$year == year & sympFac$genderMeasure == "sympFacMen",]$count !=0){
for (i in 1:sympFac[sympFac$year == year & sympFac$genderMeasure == "sympFacMen",]$count){
sympFac_data[sympFac_data$year == year & sympFac_data$gender == "m", ]$sympFac[i] <- 1
}
}
}
total <- dplyr::filter(yearly_1, yearly_1$genderMeasure %in% c("sympFacWomen", "sympFacMen"))
sympFac_data <- data.frame(year = rep(total$year, total$count),
gender = rep(total$genderMeasure, total$count))
sympFac_data$gender <- ifelse(sympFac_data$gender == "sympFacWomen", "f", "m")
sympFac_data$sympFac <- rep(0, times = nrow(sympFac_data))
sympFac <- dplyr::filter(yearly_1, yearly_1$genderMeasure %in% c("sympFacWomen", "sympFacMen"))
for (year in sympFac$year){ #WOMEN sympFac
if (sympFac[sympFac$year == year & sympFac$genderMeasure == "sympFacWomen",]$count !=0){
for (i in 1:sympFac[sympFac$year == year & sympFac$genderMeasure == "sympFacWomen",]$count){
#sympFacent_data[sympFacent_data$year == year & sympFacent_data$gender == "f", ][i]
sympFac_data[sympFac_data$year == year & sympFac_data$gender == "f", ]$sympFac[i] <- 1
}
}
}
for (year in sympFac$year){ #MEN sympFac
if (sympFac[sympFac$year == year & sympFac$genderMeasure == "sympFacMen",]$count !=0){
for (i in 1:sympFac[sympFac$year == year & sympFac$genderMeasure == "sympFacMen",]$count){
sympFac_data[sympFac_data$year == year & sympFac_data$gender == "m", ]$sympFac[i] <- 1
}
}
}
#faculty
m1_sympFac <- glm(sympFac ~ gender + year + gender*year, family = binomial(), data = sympFac_data)
summary(m1_sympFac)
#faculty
m1_sympFac <- glm(sympFac ~ gender + year, family = binomial(), data = sympFac_data)
#students
#Does your gender affect your probability of giving a student symposium talk?
m1_sympStud <- glm(sympStud ~ gender + year, family = binomial(), data = sympStudent_data)
summary(m1_sympStud)
#faculty
m1_sympFac <- glm(sympFac ~ gender + year, family = binomial(), data = sympFac_data)
summary(m1_sympFac)
View(sympFac)
View(sympFac_data)
#faculty
m1_sympFac <- glm(sympFac ~ gender, family = binomial(), data = sympFac_data)
summary(m1_sympFac)
#faculty
m1_sympFac <- glm(sympFac ~ gender + year, family = binomial(), data = sympFac_data)
summary(m1_sympFac)
#faculty
m1_sympFac <- glm(sympFac ~ gender + year, family = binomial(), data = sympFac_data)
summary(m1_sympFac)
lm(sympFac ~ gender)
lm(sympFac ~ gender, data = sympFac_data)
summary(lm(sympFac ~ gender, data = sympFac_data))
#faculty
m1_sympFac <- glm(sympFac ~ gender + year, family = binomial(), data = sympFac_data)
plot(m1_sympFac)
summary(m1_sympFac)
View(program_data)
#faculty
M <- as.table(c(6, 24))
dimnames(M) <- list(gender = c("F", "M"))
(Xsq <- chisq.test(M))
setwd("/Users/cora/git_repos/RankingMethods/")
getwd()
lbw_wi <- read_csv("lbw_wi.csv")
library(tidyverse)
library(coda)
setwd("/Users/cora/git_repos/RankingMethods/")
lbw_wi <- read_csv("lbw_wi.csv")
lbw_wi <- lbw_wi %>% mutate(nbw=births-lbw,perc_lbw=lbw/births*100) %>% filter(!is.na(lbw))
lbw_samples <- replicate(10000,
rbeta(71,lbw_wi$lbw,lbw_wi$nbw))
lbw_ranks <- apply(lbw_samples,2,rank)
lbw_order <- apply(lbw_samples,2,sort)
lbw_HPD <- t(apply(lbw_samples,1,function(x) HPDinterval(mcmc(x))))
lbw_rank_HPD <- t(apply(lbw_ranks,1,function(x) HPDinterval(mcmc(x))))
lbw_order_HPD <- t(apply(lbw_order,1,function(x) HPDinterval(mcmc(x))))
SEL_rank <- matrix(NA,71,71)
View(lbw_wi)
View(lbw_samples)
lbw_ranks <- apply(lbw_samples,2,rank) #Q doesnt this flip? I use 1 here in WeightedLossRanking function
lbw_order <- apply(lbw_samples,2,sort)
head(lbw_samples)
lbw_samples[1:5, 1:5]
lbw_HPD <- t(apply(lbw_samples,1,function(x) HPDinterval(mcmc(x))))
lbw_HPD[1:5]
typeof(lbw_HPD)
length(lbw_HPD)
71*2
SEL_rank <- matrix(NA,71,71)
SEL_rank <- matrix(NA,71,71) #what does SEL stand for?
for (i in 1:71) {
for (j in 1:71) {
SEL_rank[i,j] <- mean((lbw_ranks[i,]-j)^2)
}
}
SEL_prob <- matrix(NA,71,71)
for (i in 1:71) {
for (j in 1:71) {
SEL_prob[i,j] <- mean((lbw_samples[i,]-lbw_order[j,])^2)
}
}
lbw_rank_pm <- apply(lbw_ranks,1,mean)
lbw_rank_SEL_rank_ind_opt <- apply(SEL_rank,1,which.min)
lbw_rank_SEL_rank_ind_opt <- apply(SEL_rank,1,which.min) #individually optimal ranks
lbw_rank_SEL_prob_joint_opt <- as.numeric(solve_LSAP(SEL_prob))
#Q: abs val loss on pr scale?
prob1 <- matrix(NA,71,71)
for (i in 1:71) {
for (j in 1:71) {
prob1[i,j] <- mean(lbw_samples[i,]<lbw_samples[j,])
}
}
lbw_results_selr <- data_frame(county=lbw_wi$county,
LBW_pm=apply(lbw_samples,1,mean),
LBW_LCL=lbw_HPD[,1],
LBW_UCL=lbw_HPD[,2],
LBW_rank_pm=lbw_rank_pm,
LBW_rank_io=lbw_rank_SEL_rank_ind_opt,
LBW_rank_jo=lbw_rank_SEL_rank_joint_opt,
LBW_rank_LCL=lbw_rank_HPD[,1],
LBW_rank_UCL=lbw_rank_HPD[,2]) %>%
arrange(LBW_rank_jo)
lbw_results_selp <- data_frame(county=lbw_wi$county,
LBW_pm=apply(lbw_samples,1,mean),
LBW_LCL=lbw_HPD[,1],
LBW_UCL=lbw_HPD[,2],
LBW_rank_io=lbw_rank_SEL_prob_ind_opt,
LBW_rank_jo=lbw_rank_SEL_prob_joint_opt,
LBW_rank_LCL=lbw_rank_HPD[,1],
LBW_rank_UCL=lbw_rank_HPD[,2]) %>%
arrange(LBW_rank_jo)
#Q: posterior ranks?
post_ranks <- t(apply(lbw_ranks,1,function(x) table(factor(x,levels=1:71))/max(table(factor(x,levels=1:71)))))
#post_ranks <- t(apply(lbw_ranks,1,function(x) table(factor(x,levels=1:71))/10000)) #Q
#post_ranks <- post_ranks/max(post_ranks) #Q:
post_df <- melt(post_ranks) #Q: make it long?
post_df$county <- lbw_wi$county[post_df$Var1]
#Q: posterior ranks?
post_ranks <- t(apply(lbw_ranks,1,function(x) table(factor(x,levels=1:71))/max(table(factor(x,levels=1:71)))))
#post_ranks <- t(apply(lbw_ranks,1,function(x) table(factor(x,levels=1:71))/10000)) #Q
#post_ranks <- post_ranks/max(post_ranks) #Q:
post_df <- melt(post_ranks) #Q: make it long?
library(tidyverse)
#post_ranks <- t(apply(lbw_ranks,1,function(x) table(factor(x,levels=1:71))/10000)) #Q
#post_ranks <- post_ranks/max(post_ranks) #Q:
post_df <- melt(post_ranks) #Q: make it long?
library(reshape2)
#post_ranks <- t(apply(lbw_ranks,1,function(x) table(factor(x,levels=1:71))/10000)) #Q
#post_ranks <- post_ranks/max(post_ranks) #Q:
post_df <- melt(post_ranks) #Q: make it long?
#post_ranks <- t(apply(lbw_ranks,1,function(x) table(factor(x,levels=1:71))/10000)) #Q
#post_ranks <- post_ranks/max(post_ranks) #Q:
post_df <- melt(post_ranks) #Q: make it long?
post_df$county <- lbw_wi$county[post_df$Var1]
post_df$rank <- post_df$Var2
post_df$pos <- lbw_order_stats[post_df$Var2]
post_df$county <- lbw_wi$county[post_df$Var1]
post_df$rank <- post_df$Var2
post_df$pos <- lbw_order_stats[post_df$Var2]
post_df$pos <- lbw_order[post_df$Var2] #Q: lbw_order_stats doesnt exist yet. lbw_order does
post_df$county <- factor(post_df$county,levels=rev(lbw_wi$county[order(lbw_rank_SEL_prob_joint_opt)]),ordered=TRUE)
lbw_rank_SEL_prob_joint_opt <- as.numeric(solve_LSAP(SEL_prob)) #jointly optimal ranks on pr scale
library(clue)
lbw_rank_SEL_rank_ind_opt <- apply(SEL_rank,1,which.min) #individually optimal ranks
lbw_rank_SEL_rank_joint_opt <- as.numeric(solve_LSAP(SEL_rank)) #jointly optimal ranks
lbw_rank_SEL_prob_ind_opt <- apply(SEL_prob,1,which.min) #individually optimal ranks on pr scale
lbw_rank_SEL_prob_joint_opt <- as.numeric(solve_LSAP(SEL_prob)) #jointly optimal ranks on pr scale
#Q: abs val loss on pr scale?
prob1 <- matrix(NA,71,71)
for (i in 1:71) {
for (j in 1:71) {
prob1[i,j] <- mean(lbw_samples[i,]<lbw_samples[j,])
}
}
#creates data frame for all the things we've calcualted above for viz
lbw_results_selr <- data_frame(county=lbw_wi$county, #rank scale DF
LBW_pm=apply(lbw_samples,1,mean),
LBW_LCL=lbw_HPD[,1],
LBW_UCL=lbw_HPD[,2],
LBW_rank_pm=lbw_rank_pm,
LBW_rank_io=lbw_rank_SEL_rank_ind_opt,
LBW_rank_jo=lbw_rank_SEL_rank_joint_opt,
LBW_rank_LCL=lbw_rank_HPD[,1],
LBW_rank_UCL=lbw_rank_HPD[,2]) %>%
arrange(LBW_rank_jo)
lbw_results_selp <- data_frame(county=lbw_wi$county, #pr scale DF
LBW_pm=apply(lbw_samples,1,mean),
LBW_LCL=lbw_HPD[,1],
LBW_UCL=lbw_HPD[,2],
LBW_rank_io=lbw_rank_SEL_prob_ind_opt,
LBW_rank_jo=lbw_rank_SEL_prob_joint_opt,
LBW_rank_LCL=lbw_rank_HPD[,1],
LBW_rank_UCL=lbw_rank_HPD[,2]) %>%
arrange(LBW_rank_jo)
#Q: posterior ranks?
post_ranks <- t(apply(lbw_ranks,1,function(x) table(factor(x,levels=1:71))/max(table(factor(x,levels=1:71)))))
#post_ranks <- t(apply(lbw_ranks,1,function(x) table(factor(x,levels=1:71))/10000)) #Q
#post_ranks <- post_ranks/max(post_ranks) #Q:
post_df <- melt(post_ranks) #Q: make it long?
post_df$county <- lbw_wi$county[post_df$Var1]
post_df$rank <- post_df$Var2
post_df$pos <- lbw_order[post_df$Var2] #Q: lbw_order_stats doesnt exist yet. lbw_order does
post_df$county <- factor(post_df$county,levels=rev(lbw_wi$county[order(lbw_rank_SEL_prob_joint_opt)]),ordered=TRUE)
ggplot(post_df,aes(x=rank,y=county,color=value))+
geom_point(pch=15,cex=2)+
scale_y_discrete("") +
scale_x_continuous("",breaks=seq(1,71,by=5))+
#  scale_x_continuous(breaks=lbw_order_stats[c(1:7,seq(10,60,by=10),67:71)],minor_breaks=lbw_order_stats,labels=c(1:7,seq(10,60,by=10),67:71))+
scale_color_gradient(low="white",high="black",limits=c(0,1),guide=FALSE)+
theme_bw()+theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank())
#grey scale rank viz ##TODO add title and legends
ggplot(post_df,aes(x=rank,y=county,color=value))+
geom_point(pch=15,cex=2)+
scale_y_discrete("") +
scale_x_continuous("",breaks=seq(1,71,by=5))+
#  scale_x_continuous(breaks=lbw_order_stats[c(1:7,seq(10,60,by=10),67:71)],minor_breaks=lbw_order_stats,labels=c(1:7,seq(10,60,by=10),67:71))+
scale_color_gradient(low="white",high="black",limits=c(0,1),guide=FALSE)+
theme_bw()+theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank()) +
main("County Ranks by Rank Frequency")
#grey scale rank viz ##TODO add title and legends
ggplot(post_df,aes(x=rank,y=county,color=value))+
geom_point(pch=15,cex=2)+
scale_y_discrete("") +
scale_x_continuous("",breaks=seq(1,71,by=5))+
#  scale_x_continuous(breaks=lbw_order_stats[c(1:7,seq(10,60,by=10),67:71)],minor_breaks=lbw_order_stats,labels=c(1:7,seq(10,60,by=10),67:71))+
scale_color_gradient(low="white",high="black",limits=c(0,1),guide=FALSE)+
theme_bw()+theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank()) +
title("County Ranks by Rank Frequency")
#grey scale rank viz ##TODO add title and legends
ggplot(post_df,aes(x=rank,y=county,color=value))+
geom_point(pch=15,cex=2)+
scale_y_discrete("") +
scale_x_continuous("",breaks=seq(1,71,by=5))+
#  scale_x_continuous(breaks=lbw_order_stats[c(1:7,seq(10,60,by=10),67:71)],minor_breaks=lbw_order_stats,labels=c(1:7,seq(10,60,by=10),67:71))+
scale_color_gradient(low="white",high="black",limits=c(0,1),guide=FALSE)+
theme_bw()+theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank()) +
title("County Ranks by Rank Frequency")
#grey scale rank viz ##TODO add title and legends
ggplot(post_df,aes(x=rank,y=county,color=value))+
geom_point(pch=15,cex=2)+
scale_y_discrete("") +
scale_x_continuous("",breaks=seq(1,71,by=5))+
#  scale_x_continuous(breaks=lbw_order_stats[c(1:7,seq(10,60,by=10),67:71)],minor_breaks=lbw_order_stats,labels=c(1:7,seq(10,60,by=10),67:71))+
scale_color_gradient(low="white",high="black",limits=c(0,1),guide=FALSE)+
theme_bw()+theme(panel.grid.major=element_blank(),panel.grid.minor=element_blank()) +
xlab("Rank") + ggtitle("County Ranks by Rank Frequency")
lbw_HPD[1:5,1:5]
lbw_HPD[1:5,]
